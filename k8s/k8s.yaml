---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  ports:
    - name: "3333"
      port: 3333
      targetPort: 3000
  selector:
    io.kompose.service: grafana

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: loki
  name: loki
spec:
  ports:
    - name: "3100"
      port: 3100
      targetPort: 3100
  selector:
    io.kompose.service: loki

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: pgadmin
  name: pgadmin
spec:
  ports:
    - name: "5050"
      port: 5050
      targetPort: 80
  selector:
    io.kompose.service: pgadmin

---

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
  selector:
    io.kompose.service: prometheus

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/backend-grafana: "true"
        io.kompose.service: grafana
    spec:
      containers:
        - env:
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: Admin
            - name: GF_AUTH_BASIC_ENABLED
              value: "false"
            - name: GF_AUTH_DISABLE_LOGIN_FORM
              value: "true"
            - name: GF_AUTH_DISABLE_SIGNOUT_MENU
              value: "true"
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: admin
            - name: GF_SECURITY_ADMIN_USER
              value: admin
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
          image: grafana/grafana:7.5.7
          name: grafana
          ports:
            - containerPort: 3000
              hostPort: 3333
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana
            - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
              name: grafana-claim1
            - mountPath: /etc/grafana/provisioning/dashboards
              name: grafana-claim2
      restartPolicy: Always
      volumes:
        - name: grafana
          persistentVolumeClaim:
            claimName: grafana
        - name: grafana-claim1
          persistentVolumeClaim:
            claimName: grafana-claim1
        - name: grafana-claim2
          persistentVolumeClaim:
            claimName: grafana-claim2

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: grafana-claim1
  name: grafana-claim1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: grafana-claim2
  name: grafana-claim2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: loki
  name: loki
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: loki
  template:
    metadata:
      labels:
        io.kompose.network/backend-grafana: "true"
        io.kompose.service: loki
    spec:
      containers:
        - args:
            - -config.file=/etc/loki/local-config.yaml
          image: grafana/loki:2.9.0
          name: loki
          ports:
            - containerPort: 3100
              hostPort: 3100
              protocol: TCP
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: pgadmin
  name: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: pgadmin
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/backend-nest: "true"
        io.kompose.service: pgadmin
    spec:
      containers:
        - args:
            - /bin/sh
            - -c
            - sleep 10; /entrypoint.sh
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              value: admin@skinsight.fr
            - name: PGADMIN_DEFAULT_PASSWORD
              value: skinsight
          image: dpage/pgadmin4:4.30
          name: pgadmin
          ports:
            - containerPort: 80
              hostPort: 5050
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/pgadmin
              name: pgadmin
      restartPolicy: Always
      volumes:
        - name: pgadmin
          persistentVolumeClaim:
            claimName: pgadmin

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: pgadmin
  name: pgadmin
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: prometheus
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/backend-grafana: "true"
        io.kompose.network/backend-nest: "true"
        io.kompose.service: prometheus
    spec:
      containers:
        - image: prom/prometheus:v2.22.0
          name: prometheus
          ports:
            - containerPort: 9090
              hostPort: 9090
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-claim0
      restartPolicy: Always
      volumes:
        - name: prometheus-claim0
          persistentVolumeClaim:
            claimName: prometheus-claim0

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: prometheus-claim0
  name: prometheus-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: promtail
  name: promtail
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: promtail
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/backend-grafana: "true"
        io.kompose.service: promtail
    spec:
      containers:
        - args:
            - -config.file=/etc/promtail/config.yml
          image: grafana/promtail:2.9.0
          name: promtail
          volumeMounts:
            - mountPath: /var/log
              name: promtail-claim0
      restartPolicy: Always
      volumes:
        - name: promtail-claim0
          persistentVolumeClaim:
            claimName: promtail-claim0

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: promtail-claim0
  name: promtail-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
